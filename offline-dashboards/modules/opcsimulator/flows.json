[{"id":"63d89a00.43c598","type":"tab","label":"OPC UA Server (with URI) 1","disabled":false,"info":""},{"id":"f3f78d16.4c4c1","type":"tab","label":"OPC UA Server (with URI) 2","disabled":false,"info":""},{"id":"1940f427.c54a8c","type":"opcua-compact-server","z":"63d89a00.43c598","port":54845,"endpoint":"OPCUA/Site1","productUri":"OPC-Site-01","acceptExternalCommands":true,"maxAllowedSessionNumber":"10","maxConnectionsPerEndpoint":"10","maxAllowedSubscriptionNumber":"100","alternateHostname":"","name":"OPC Server @54845","showStatusActivities":false,"showErrors":true,"allowAnonymous":true,"individualCerts":false,"isAuditing":false,"serverDiscovery":true,"users":[],"xmlsetsOPCUA":[],"publicCertificateFile":"","privateCertificateFile":"","registerServerMethod":"1","discoveryServerEndpointUrl":"","capabilitiesForMDNS":"","maxNodesPerRead":1000,"maxNodesPerWrite":1000,"maxNodesPerHistoryReadData":100,"maxNodesPerBrowse":3000,"maxBrowseContinuationPoints":"10","maxHistoryContinuationPoints":"10","delayToInit":"1000","delayToClose":"200","serverShutdownTimeout":"100","addressSpaceScript":"function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n  // server = the created node-opcua server\n  // addressSpace = script placeholder\n  // eventObjects = to hold event variables in memory from this script\n  \n  // internal global sandbox objects are \n  // node = node of the flex server, \n  // coreServer = core iiot server object for debug and access to nodeOPCUA,\n  // and scriptObjects to hold variables and functions\n\n  const opcua = coreServer.choreCompact.opcua;\n  const LocalizedText = opcua.LocalizedText;\n  const namespace = addressSpace.getOwnNamespace();\n  \n  const Variant = opcua.Variant;\n  const DataType = opcua.DataType;\n  const DataValue = opcua.DataValue;\n\n  var flexServerInternals = this;\n  \n  this.sandboxFlowContext.set(\"status\", 0.0);\n  this.sandboxFlowContext.set(\"item_count_good\", 0.0);\n  this.sandboxFlowContext.set(\"item_count_bad\", 0.0);\n  this.sandboxFlowContext.set(\"prev_status_timestamp\", 0.0);\n\n\n  const rootFolder = addressSpace.findNode(\"RootFolder\");\n  \n  const myDevice = namespace.addFolder(rootFolder.objects, {\n  \"browseName\": \"Simulation\"\n  });\n\n  const varStatus = namespace.addVariable({\n  \"organizedBy\": myDevice,\n  \"browseName\": \"STATUS\",\n  \"nodeId\": \"ns=1;s=STATUS\",\n  \"dataType\": \"Double\",\n  \"value\": {\n    \"get\": function() {\n      return new Variant({\n        \"dataType\": DataType.Double,\n        \"value\": flexServerInternals.sandboxFlowContext.get(\"status\")\n      });\n    },\n    \"set\": function(variant) {\n      flexServerInternals.sandboxFlowContext.set(\n        \"status\",\n        parseFloat(variant.value)\n      );\n      return opcua.StatusCodes.Good;\n    }\n  }\n  });\n\n  const varItemCountGood = namespace.addVariable({\n  \"organizedBy\": myDevice,\n  \"browseName\": \"ITEM_COUNT_GOOD\",\n  \"nodeId\": \"ns=1;s=ITEM_COUNT_GOOD\",\n  \"dataType\": \"Double\",\n  \"value\": {\n    \"get\": function() {\n      return new Variant({\n        \"dataType\": DataType.Double,\n        \"value\": flexServerInternals.sandboxFlowContext.get(\"item_count_good\")\n      });\n    },\n    \"set\": function(variant) {\n      flexServerInternals.sandboxFlowContext.set(\n        \"item_count_good\",\n        parseFloat(variant.value)\n      );\n      return opcua.StatusCodes.Good;\n    }\n  }\n  });\n  \n  const varItemCountBad = namespace.addVariable({\n  \"organizedBy\": myDevice,\n  \"browseName\": \"ITEM_COUNT_BAD\",\n  \"nodeId\": \"ns=1;s=ITEM_COUNT_BAD\",\n  \"dataType\": \"Double\",\n  \"value\": {\n    \"get\": function() {\n      return new Variant({\n        \"dataType\": DataType.Double,\n        \"value\": flexServerInternals.sandboxFlowContext.get(\"item_count_bad\")\n      });\n    },\n    \"set\": function(variant) {\n      flexServerInternals.sandboxFlowContext.set(\n        \"item_count_bad\",\n        parseFloat(variant.value)\n      );\n      return opcua.StatusCodes.Good;\n    }\n  }\n  });\n  \n  done();\n}\n","x":540,"y":240,"wires":[]},{"id":"7c2c600d.ec34d","type":"inject","z":"63d89a00.43c598","name":"","topic":"","payload":"","payloadType":"date","repeat":"5","crontab":"","once":true,"onceDelay":"0.5","x":230,"y":120,"wires":[["d45c3f62.8cd78"]]},{"id":"d45c3f62.8cd78","type":"function","z":"63d89a00.43c598","name":"Generate values","func":"var prevStatus = flow.get('status');\nvar prevStatusTimestamp = flow.get('prev_status_timestamp');\nvar curStatus;\nvar isOnOrOff;\nvar itemCountGood;\nvar itemCountBad;\nconst ChangeInterval = 600000;\nconst StatusValuesForOn = [101.0,105.0,108.0];\nconst StatusValuesForOff = [102.0,104.0,106.0,107.0,109.0];\n\nif(prevStatus===0)\n{\n  curStatus = StatusValuesForOn[parseInt((Math.random() * StatusValuesForOn.length-1), 10)];\n  prevStatusTimestamp=Date.now();\n}\nelse if (Date.now()-prevStatusTimestamp>ChangeInterval)\n{\n isOnOrOff = (Math.random()<0.9);\n if (isOnOrOff)\n    curStatus = StatusValuesForOn[parseInt((Math.random() * StatusValuesForOn.length-1), 10)];\n else\n    curStatus = StatusValuesForOff[parseInt((Math.random() * StatusValuesForOff.length-1), 10)];\n\n prevStatusTimestamp=Date.now();\n}\nelse\n curStatus = prevStatus;\n\n\nisOnOrOff = StatusValuesForOn.includes(curStatus);\n\nif (isOnOrOff)\n{\n    itemCountGood = 80.0+Math.round(Math.random()*41);\n    itemCountBad = parseFloat(Math.round(Math.random()*11));\n}\nelse\n{\n    itemCountGood = 0.0;\n    itemCountBad = 0.0;\n}\n\nflow.set('prev_status_timestamp', prevStatusTimestamp);\nflow.set('status', curStatus) ;\nflow.set('item_count_good', itemCountGood);\nflow.set('item_count_bad', itemCountBad);\n\nmsg.payload = [\n    flow.get('status'),\n    flow.get('item_count_good'),\n    flow.get('item_count_bad')\n]\nreturn msg;","outputs":1,"noerr":0,"x":450,"y":120,"wires":[["13553d77.3716e3"]]},{"id":"13553d77.3716e3","type":"debug","z":"63d89a00.43c598","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":720,"y":120,"wires":[]},{"id":"f62394f8.ba3358","type":"opcua-compact-server","z":"f3f78d16.4c4c1","port":"54855","endpoint":"OPCUA/Site2","productUri":"OPC-Site-02","acceptExternalCommands":true,"maxAllowedSessionNumber":"10","maxConnectionsPerEndpoint":"10","maxAllowedSubscriptionNumber":"100","alternateHostname":"","name":"OPC Server @54855","showStatusActivities":false,"showErrors":true,"allowAnonymous":true,"individualCerts":false,"isAuditing":false,"serverDiscovery":true,"users":[],"xmlsetsOPCUA":[],"publicCertificateFile":"","privateCertificateFile":"","registerServerMethod":"1","discoveryServerEndpointUrl":"","capabilitiesForMDNS":"","maxNodesPerRead":1000,"maxNodesPerWrite":1000,"maxNodesPerHistoryReadData":100,"maxNodesPerBrowse":3000,"maxBrowseContinuationPoints":"10","maxHistoryContinuationPoints":"10","delayToInit":"1000","delayToClose":"200","serverShutdownTimeout":"100","addressSpaceScript":"function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n  // server = the created node-opcua server\n  // addressSpace = script placeholder\n  // eventObjects = to hold event variables in memory from this script\n  \n  // internal global sandbox objects are \n  // node = node of the flex server, \n  // coreServer = core iiot server object for debug and access to nodeOPCUA,\n  // and scriptObjects to hold variables and functions\n\n  const opcua = coreServer.choreCompact.opcua;\n  const LocalizedText = opcua.LocalizedText;\n  const namespace = addressSpace.getOwnNamespace();\n  \n  const Variant = opcua.Variant;\n  const DataType = opcua.DataType;\n  const DataValue = opcua.DataValue;\n\n  var flexServerInternals = this;\n  \n  this.sandboxFlowContext.set(\"status\", 0.0);\n  this.sandboxFlowContext.set(\"item_count_good\", 0.0);\n  this.sandboxFlowContext.set(\"item_count_bad\", 0.0);\n  this.sandboxFlowContext.set(\"prev_status_timestamp\", 0.0);\n\n\n  const rootFolder = addressSpace.findNode(\"RootFolder\");\n  \n  const myDevice = namespace.addFolder(rootFolder.objects, {\n  \"browseName\": \"Simulation\"\n  });\n\n  const varStatus = namespace.addVariable({\n  \"organizedBy\": myDevice,\n  \"browseName\": \"STATUS\",\n  \"nodeId\": \"ns=1;s=STATUS\",\n  \"dataType\": \"Double\",\n  \"value\": {\n    \"get\": function() {\n      return new Variant({\n        \"dataType\": DataType.Double,\n        \"value\": flexServerInternals.sandboxFlowContext.get(\"status\")\n      });\n    },\n    \"set\": function(variant) {\n      flexServerInternals.sandboxFlowContext.set(\n        \"status\",\n        parseFloat(variant.value)\n      );\n      return opcua.StatusCodes.Good;\n    }\n  }\n  });\n\n  const varItemCountGood = namespace.addVariable({\n  \"organizedBy\": myDevice,\n  \"browseName\": \"ITEM_COUNT_GOOD\",\n  \"nodeId\": \"ns=1;s=ITEM_COUNT_GOOD\",\n  \"dataType\": \"Double\",\n  \"value\": {\n    \"get\": function() {\n      return new Variant({\n        \"dataType\": DataType.Double,\n        \"value\": flexServerInternals.sandboxFlowContext.get(\"item_count_good\")\n      });\n    },\n    \"set\": function(variant) {\n      flexServerInternals.sandboxFlowContext.set(\n        \"item_count_good\",\n        parseFloat(variant.value)\n      );\n      return opcua.StatusCodes.Good;\n    }\n  }\n  });\n  \n  const varItemCountBad = namespace.addVariable({\n  \"organizedBy\": myDevice,\n  \"browseName\": \"ITEM_COUNT_BAD\",\n  \"nodeId\": \"ns=1;s=ITEM_COUNT_BAD\",\n  \"dataType\": \"Double\",\n  \"value\": {\n    \"get\": function() {\n      return new Variant({\n        \"dataType\": DataType.Double,\n        \"value\": flexServerInternals.sandboxFlowContext.get(\"item_count_bad\")\n      });\n    },\n    \"set\": function(variant) {\n      flexServerInternals.sandboxFlowContext.set(\n        \"item_count_bad\",\n        parseFloat(variant.value)\n      );\n      return opcua.StatusCodes.Good;\n    }\n  }\n  });\n  \n  done();\n}\n","x":540,"y":240,"wires":[]},{"id":"fe4c51b8.7f676","type":"inject","z":"f3f78d16.4c4c1","name":"","topic":"","payload":"","payloadType":"date","repeat":"5","crontab":"","once":true,"onceDelay":"0.5","x":230,"y":120,"wires":[["877a1383.c9dae"]]},{"id":"877a1383.c9dae","type":"function","z":"f3f78d16.4c4c1","name":"Generate values","func":"var prevStatus = flow.get('status');\nvar prevStatusTimestamp = flow.get('prev_status_timestamp');\nvar curStatus;\nvar isOnOrOff;\nvar itemCountGood;\nvar itemCountBad;\nconst ChangeInterval = 600000;\nconst StatusValuesForOn = [101.0,105.0,108.0];\nconst StatusValuesForOff = [102.0,104.0,106.0,107.0,109.0];\n\nif(prevStatus===0)\n{\n  curStatus = StatusValuesForOn[parseInt((Math.random() * StatusValuesForOn.length-1), 10)];\n  prevStatusTimestamp=Date.now();\n}\nelse if (Date.now()-prevStatusTimestamp>ChangeInterval)\n{\n isOnOrOff = (Math.random()<0.9);\n if (isOnOrOff)\n    curStatus = StatusValuesForOn[parseInt((Math.random() * StatusValuesForOn.length-1), 10)];\n else\n    curStatus = StatusValuesForOff[parseInt((Math.random() * StatusValuesForOff.length-1), 10)];\n\n prevStatusTimestamp=Date.now();\n}\nelse\n curStatus = prevStatus;\n\nisOnOrOff = StatusValuesForOn.includes(curStatus);\n\nif (isOnOrOff)\n{\n    itemCountGood = 80.0+Math.round(Math.random()*41);\n    itemCountBad = parseFloat(Math.round(Math.random()*11));\n}\nelse\n{\n    itemCountGood = 0.0;\n    itemCountBad = 0.0;\n}\n\nflow.set('prev_status_timestamp', prevStatusTimestamp);\nflow.set('status', curStatus) ;\nflow.set('item_count_good', itemCountGood);\nflow.set('item_count_bad', itemCountBad);\n\nmsg.payload = [\n    flow.get('status'),\n    flow.get('item_count_good'),\n    flow.get('item_count_bad')\n]\nreturn msg;","outputs":1,"noerr":0,"x":450,"y":120,"wires":[["ea0aaf26.8f989"]]},{"id":"ea0aaf26.8f989","type":"debug","z":"f3f78d16.4c4c1","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":720,"y":120,"wires":[]}]